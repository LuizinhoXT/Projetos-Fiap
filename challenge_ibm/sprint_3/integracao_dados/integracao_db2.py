# -*- coding: utf-8 -*-
"""Integracao_db2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HP05TF4ObYPUhEsbVKsrNlCQRyWJQSbA

### Conexão com banco de dados
"""

!pip install ibm_db
!pip install ibm_db_sa

import ibm_db
import pandas as pd

# ========== CONFIGURAÇÕES DE CONEXÃO ==========
dsn_hostname = "b70af05b-76e4-4bca-a1f5-23dbb4c6a74e.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud"
dsn_uid = "wbr64236"
dsn_pwd = "kHwQNU8Tw4ctrmKT"
dsn_port = "32716"
dsn_database = "bludb"
dsn_protocol = "TCPIP"
dsn_ssl = "SSL"
dsn_certificate = "1cbbb1b6-3a1a-4d49-9262-3102a8f7a7c8"
# ========== STRING DE CONEXÃO ==========
dsn = (
    f"DATABASE={dsn_database};"
    f"HOSTNAME={dsn_hostname};"
    f"PORT={dsn_port};"
    f"PROTOCOL={dsn_protocol};"
    f"UID={dsn_uid};"
    f"PWD={dsn_pwd};"
    f"SECURITY={dsn_ssl};"
    f"SSLSererCertificate={dsn_certificate}"
)

# ========== CONEXÃO ==========

conn = ibm_db.connect(dsn, "", "")

"""### Criação da tabela e Integração dos dados category_trusted"""

ct_product_category = """

CREATE TABLE DMP_MAP_CATEGORY (
    ID INTEGER,
    PRODUCT_CATEGORY_NAME VARCHAR(46),
    PRODUCT_CATEGORY_NAME_ENGLISH VARCHAR(39)
);

"""

ibm_db.exec_immediate(conn,ct_product_category)

insert_product_category = """

insert into DMP_MAP_CATEGORY (ID, PRODUCT_CATEGORY_NAME, PRODUCT_CATEGORY_NAME_ENGLISH)
values (?,?,?)

"""

stmt = ibm_db.prepare(conn,insert_product_category)

category = pd.read_csv("/content/category_trusted.csv")
category.dtypes

for _, row in category.iterrows():
        # Criar tupla com os dados na ordem correta
        dados = (int(row['Unnamed: 0']),
                 row['product_category_name'],
                 row['product_category_name_english'])
        ibm_db.execute(stmt, dados)

"""### Criação da tabela e integração dos dados de orders"""

ct_orders = """
CREATE TABLE DMP_MAP_ORDERS (
    id INTEGER,
    ORDER_ID VARCHAR(32),
    CUSTOMER_ID VARCHAR(32),
    ORDER_STATUS VARCHAR(11),
    ORDER_PURCHASE_TIMESTAMP TIMESTAMP,
    ORDER_APPROVED_AT TIMESTAMP,
    ORDER_DELIVERED_CARRIER_DATE TIMESTAMP,
    ORDER_DELIVERED_CUSTOMER_DATE TIMESTAMP,
    ORDER_ESTIMATED_DELIVERY_DATE DATE
);

"""
ibm_db.exec_immediate(conn,ct_orders)

orders = pd.read_csv("/content/order_trusted.csv")

orders.dtypes

orders['order_purchase_timestamp'] = pd.to_datetime(orders['order_purchase_timestamp'])
orders['order_approved_at'] = pd.to_datetime(orders['order_approved_at'])
orders['order_delivered_carrier_date'] = pd.to_datetime(orders['order_delivered_carrier_date'])
orders['order_delivered_customer_date'] = pd.to_datetime(orders['order_delivered_customer_date'])
orders['order_estimated_delivery_date'] = pd.to_datetime(orders['order_estimated_delivery_date'])

insert_orders = """

insert into DMP_MAP_ORDERS (
  ID,
  ORDER_ID,
  CUSTOMER_ID,
  ORDER_STATUS,
  ORDER_PURCHASE_TIMESTAMP,
  ORDER_APPROVED_AT,
  ORDER_DELIVERED_CARRIER_DATE,
  ORDER_DELIVERED_CUSTOMER_DATE,
  ORDER_ESTIMATED_DELIVERY_DATE
)
values (?,?,?,?,?,?,?,?,?)

"""

stmt = ibm_db.prepare(conn,insert_orders)

for _, row in orders.iterrows():
        # Criar tupla com os dados na ordem correta
        dados = (int(row['Unnamed: 0']),
                 row['order_id'],
                 row['customer_id'],
                 row['order_status'],
                 row['order_purchase_timestamp'].to_pydatetime().date(),
                 row['order_approved_at'].to_pydatetime().date(),
                 row['order_delivered_carrier_date'].to_pydatetime().date(),
                 row['order_delivered_customer_date'].to_pydatetime().date(),
                 row['order_estimated_delivery_date'].to_pydatetime())
        ibm_db.execute(stmt, dados)

"""### Criação da tabela e insserção de dados customers"""

customers = pd.read_csv("/content/customers_trusted.csv")

ct_customers = """
CREATE TABLE DMP_MAP_CUSTOMERS (
    ID INTEGER,
    CUSTOMER_ID VARCHAR(32),
    CUSTOMER_UNIQUE_ID VARCHAR(32),
    CUSTOMER_ZIP_CODE_PREFIX VARCHAR(24),
    CUSTOMER_CITY VARCHAR(27),
    CUSTOMER_STATE VARCHAR(14)
);
"""
ibm_db.exec_immediate(conn,ct_orders)

insert_orders = """

insert into DMP_MAP_CUSTOMERS (
  ID,
  CUSTOMER_ID,
  CUSTOMER_UNIQUE_ID,
  ORDER_STATUS,
  CUSTOMER_ZIP_CODE_PREFIX,
  CUSTOMER_CITY,
  CUSTOMER_STATE

)
values (?,?,?,?,?,?.?)

"""

stmt = ibm_db.prepare(conn,insert_orders)

for _, row in orders.iterrows():
        # Criar tupla com os dados na ordem correta
        dados = (int(row['Unnamed: 0']),
                 row['order_id'],
                 row['customer_id'],
                 row['customer_unique_id'],
                 row['customer_zip_code_prefix'],
                 row['customer_city'].to_pydatetime(),
                 row['customer_state'].to_pydatetime())
        ibm_db.execute(stmt, dados)

"""### Criação da tabela e inserção de dados frequencia_palavras"""

freq_palavras = pd.read_csv("/content/frquencia_palavras_trusted.csv")
freq_palavras.dtypes

ct_freq_palavras = """

CREATE TABLE DMP_MAP_FREQUENCIA_PALAVRAS (
    ID INT,
    PALAVRA VARCHAR(200),
    FREQUENCIA SMALLINT,
    SENTIMENTO VARCHAR(8)
);


"""
ibm_db.exec_immediate(conn,ct_freq_palavras)

insert_data_freq_palavras = """

insert into DMP_MAP_FREQUENCIA_PALAVRAS (
  ID,
  PALAVRA,
  FREQUENCIA,
  SENTIMENTO
)
values (?,?,?,?)

"""

stmt = ibm_db.prepare(conn,insert_data_freq_palavras)

for _, row in freq_palavras.iterrows():
        # Criar tupla com os dados na ordem correta
        dados = (int(row['Unnamed: 0']),
                 row['palavra'],
                 row['frequencia'],
                 row['sentimento'])
        ibm_db.execute(stmt, dados)

"""### Criação da tabela e inserção de dados geolocation"""

geolocation = pd.read_csv("/content/geolocation_trusted.csv")
geolocation.dtypes

ct_geolocation = """
CREATE TABLE DMP_MAP_GEOLOCATION (
    ID INTEGER,
    GEOLOCATION_ZIP_CODE_PREFIX SMALLINT,
    GEOLOCATION_LAT DECFLOAT(34),
    GEOLOCATION_LNG DECFLOAT(34),
    GEOLOCATION_CITY VARCHAR(10),
    GEOLOCATION_STATE VARCHAR(2)
);

"""
ibm_db.exec_immediate(conn,ct_geolocation)

insert_geolocation = """

insert into DMP_MAP_GEOLOCATION (
  ID,
  GEOLOCATION_ZIP_CODE_PREFIX,
  GEOLOCATION_LAT,
  GEOLOCATION_LNG,
  GEOLOCATION_CITY,
  GEOLOCATION_STATE
)
values (?,?,?,?,?,?)

"""

stmt = ibm_db.prepare(conn,insert_geolocation)

for _, row in freq_palavras.iterrows():
        # Criar tupla com os dados na ordem correta
        dados = (int(row['Unnamed: 0']),
                 row['geolocation_zip_code_prefix'],
                 row['geolocation_lat'],
                 row['geolocation_lng'],
                 row['geolocation_city'],
                 row['geolocation_state'])
        ibm_db.execute(stmt, dados)

"""### Criação da tabela e inserção items"""



"""### Criação da tabela e incersão payments"""



"""### Criação da tabela e inserção Resultados ML"""



"""### Criação da tabela e inserção reviews"""



"""### Criação da tabela e inserção sellers"""



"""### Criação da tabela e inserção dados predicao"""

